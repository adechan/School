package rsa;

import java.math.BigInteger;
import java.util.Random;

public class RSAChinese {

	private BigInteger p;
	private BigInteger q;
	private BigInteger n;
	private BigInteger phi;
	private BigInteger e;
	private BigInteger d;
	
	private BigInteger dp;
	private BigInteger dq;
	private BigInteger qinv;
	
	private BigInteger m1;
	private BigInteger m2;
	private BigInteger h;
	private BigInteger m;
	
	private RSA rsa = new RSA();
	
	// Generates a public key for encryption and a private key for decryption
	public RSAChinese()
	{
		Random randomPrime = new Random();
		
		// Generate 2 large random and distinct primes p and q on 1024 bits 
		// isProbablePrime: returns true if this number is probably prime with specified bitLength
		p = BigInteger.probablePrime(1024, randomPrime);
		q = BigInteger.probablePrime(1024, randomPrime);
		
		// n = p x q
		n = p.multiply(q);
		
		// phi = (p - 1)(q - 1)
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
		
		// Select a random integer e, 1 < e < phi, such that gcd(e, pfi) = 1
		e = BigInteger.probablePrime(512, randomPrime);
		
		while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0)
			e.add(BigInteger.ONE);
		
		System.out.println("e is " + e);
		// Use the extended Euclidian algorithm to compute the unique integer d, 
		// 1 < d < pfi such taht ed congruent 1 mod pfi
		d = e.modInverse(phi);
		System.out.println("d is " + d);
		
		
		dp = d.remainder(p.subtract(BigInteger.ONE));
		dq = d.remainder(q.subtract(BigInteger.ONE));
		qinv = q.modInverse(p);	
		
	}
	
	public byte[] encryptText(byte[] message)
	{
		return this.rsa.encryptText(message);
	}
	
	public byte[] encryptText(String message)
	{
		return this.rsa.encryptText(message);
	}
	
	public byte[] decryptText(String ciphertext)
	{
		
	}
	
	public BigInteger decryptText(BigInteger ciphertext)
	{
		BigInteger message;
		BigInteger m1 = ciphertext.modPow(dp, p);
	    BigInteger m2 = ciphertext.modPow(dq, q);
	    BigInteger h = ((m1.subtract(m2)).multiply(qinv)).remainder(p);
	    message = (h.multiply(q)).add(m2);
		return message;
	}
	
}
