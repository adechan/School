package rsa;

import java.math.BigInteger;
import java.util.Random;

public class RSAChinese {
	private BigInteger n;
	private BigInteger phi;
	private BigInteger e;
	private BigInteger d;
	
	private BigInteger dp;
	private BigInteger dq;
	private BigInteger qinv;
	
	private BigInteger m1;
	private BigInteger m2;
	private BigInteger h;
	private BigInteger m;
	
	private RSA rsa = new RSA();
	
	// Generates a public key for encryption and a private key for decryption
	public RSAChinese()
	{
		dp = d.remainder(p.subtract(BigInteger.ONE));
		dq = d.remainder(q.subtract(BigInteger.ONE));
		qinv = q.modInverse(p);	
		
	}
	
	public byte[] encryptText(byte[] message)
	{
		return this.rsa.encryptText(message);
	}
	
	public byte[] encryptText(String message)
	{
		return this.rsa.encryptText(message);
	}
	
	public byte[] decryptText(String ciphertext)
	{
		
	}
	
	public BigInteger decryptText(BigInteger ciphertext)
	{
		BigInteger message;
		BigInteger m1 = ciphertext.modPow(dp, p);
	    BigInteger m2 = ciphertext.modPow(dq, q);
	    BigInteger h = ((m1.subtract(m2)).multiply(qinv)).remainder(p);
	    message = (h.multiply(q)).add(m2);
		return message;
	}
	
}
